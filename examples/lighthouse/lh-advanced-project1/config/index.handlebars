<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />
    <title>Accessibility Report Summary</title>
    <style>
      html,
      body {
	  background-color: #ffffff;
	  color: #333333;
	  font-family: Arial, Helvetica, sans-serif;
	  font-size: 16px;
	  line-height: 22px;
	  margin: 10;
	  padding: 0;
      }

      main {
	  margin: 10px auto;
	  max-width: 1000px;
	  text-align: center;
      }

      h1 {
	  font-size: 24px;
	  line-height: 24px;
	  margin-bottom: 10px;
      }

      .label {
	  display: inline-block;
	  font-size: 1.25em;
	  padding-right: 10px;
      }

      .pages {
	  list-style-type: none;
	  margin: 10px 0 20px 0;
	  padding: 0;
      }

      .page {
	  background-color: #ffffff;
	  border: 1px solid #cccccc;
	  border-radius: 5px;
	  display: flex;
	  justify-content: space-between;
	  margin: 15px 0;
	  padding: 10px;
      }

      .page.hidden {
	  display: none;
      }

      .pageLink {
	  display: inline-block;
	  flex-grow: 1;
	  overflow: hidden;
	  padding: 5px;
	  text-align: left;
	  text-overflow: ellipsis;
	  white-space: nowrap;
      }

      .counts {
	  flex-grow: 0;
	  margin: 0;
	  max-width: 375px;
	  min-width: 375px;
	  padding: 0;
      }

      .count {
	  background-color: #f4f4f4;
	  border: 1px solid #aaaaaa;
	  border-radius: 5px;
	  display: inline-block;
	  margin-right: 5px;
	  min-width: 105px;
	  padding: 5px;
	  text-align: center;
      }

      .filter .button {
	  background-color: #ffffff;
	  border: 1px solid #ffffff;
	  border-radius: 5px;
	  display: inline-block;
	  margin-right: 5px;
	  min-width: 105px;
	  padding: 5px;
	  text-align: center;
      }

      #pa11yIssues:not(.hidden),
      #pageErrors:not(.hidden) {
	  background-color: #ffdddd;
	  border-color: #ff9696;
      }

      #noIssues:not(.hidden) {
	  background-color: #defce2;
	  border-color: #89e791;
      }

      .button:hover {
	  cursor: pointer;
      }

      .hasErrors .error {
	  background-color: #ffdddd;
	  border-color: #ff9696;
      }

      .hasWarnings .warning {
	  background-color: #ffffdd;
	  border-color: #e7c12b;
      }

      .hasNotices .notice {
	  background-color: #eef4ff;
	  border-color: #b6d0ff;
      }

      .pageError .error {
	  color: #cc0000;
	  display: inline-block;
	  margin-right: 5px;
	  padding: 5px 0;
	  text-align: left;
	  width: 100%;
      }

	  table{
		  text-align: left;
		  width: 100%;
		  border-collapse: separate;
          border-spacing: 0px;
      }
      th, td{
		  border-style: solid;
		  border-width: 1px 1px 0 0;
		  border-color: grey;
		  padding: 7px;
      }
	  td:last-child, th:last-child {
		  text-align: right;
	  }

	  th:first-child {
		  border-left-width: 1px;
		  text-align: center;
	  }

	  tfoot th, tfoot td {
		  border-bottom-width: 1px;
	  }

	  tfoot th:first-child {
		  text-align: right;
	  }

    </style>
  </head>

  <body>
    <main>
      <h1>Accessibility Report Summary</h1>
      <p>Generated at: {{date}}</p>
      <canvas id="accessibilityChart" aria-labelledby="accessibilityChartLanguage" role="img">
	Acessibility score doughnut chart with score described in the next paragraph.
      </canvas>

	  <h2>Accessibility Issues</h2>
	  <table>
		  <caption>Accessibility Issues By Type</caption>
		  <thead>
			  <tr>
				  <th scope="col">#</th>
				  <th scope="col">Accessibility Rule</th>
				  <th scope="col">Count</th>
			  </tr>
		  </thead>
		  <tbody>
			  {{#each summary.codeCounts}}
			  <tr>
				  <th scope="row">{{this.[0]}}</th>
				  <th scope="row">{{this.[1]}}</th>
				  <td>{{this.[2]}}</td>
			  </tr>
			  {{/each}}
		  </tbody>
		  <tfoot>
			  <tr>
				  <th colspan="2" scope="row">Sum</th>
				  <td>{{ summary.codeCountErrorSum }}</td>
			  </tr>
		  </tfoot>
	  </table>

	  <h2>URL Results Summary</h2>
      <p id="accessibilityChartLanguage">
	There were {{ summary.passes }} passing URLs and {{
	summary.failures }} URLs with issues giving this scan an
	accessibility score of {{ summary.score }}.
      </p>

	  <h2>Detail URL Results</h2>
      <div class="filter">
		<span class="label">Filter page results: </span>
		<button id="pa11yIssues" class="button" title="Select to turn the 'Lighthouse Issues' filter off" tabindex="0">Lighthouse Issues</button>
		<button id="noIssues" class="button" title="Select to turn the 'No Issues' filter off" tabindex="0">No Issues</button>
		<button id="pageErrors" class="button" title="Select to turn the 'Page Errors' filter off" tabindex="0">Page Errors</button>
      </div>
      <ul class="pages">
	{{#pages}}
	{{~#if message~}}
	<li class="page pageError">
	  <span class="pageLink" title="{{url}}">{{url}}</span>
	  <p class="counts">
	    <span class="error">{{message}}</span>
	  </p>
	</li>
	{{~else~}}
	<li class="page{{~#if issues.errors}} hasErrors{{/if}}{{~#if issues.warnings}} hasWarnings{{/if}}{{~#if issues.notices}} hasNotices{{/if}}">
	  {{~#if htmlReport~}}
	  <a class="pageLink" href="{{htmlReport}}" title="{{url}}">{{url}}</a>
	  {{~else~}}
	  <span class="pageLink" title="{{url}}">{{url}}</span>
	  {{~/if~}}
	  <p class="counts">
	    <button title="URL {{url}} has {{issues.errors}} errors" class="count error">{{issues.errors}} errors</button>
	    <button title="URL {{url}} has {{issues.warnings}} warnings" class="count warning">{{issues.warnings}} warnings</button>
	    <button title="URL {{url}} has {{issues.notices}} notices" class="count notice">{{issues.notices}} notices</button>
	  </p>
	</li>
	{{~/if~}}
	{{/pages}}
      </ul>
    </main>
    <script>
      const togglePages = (btn, pageQuery) => {
	  const className = 'hidden';
	  document.getElementById(btn).classList.toggle(className);
	  document.querySelectorAll(pageQuery).forEach(page => {
	      page.classList.toggle(className);
	  });
      };

	  const pa11yIssues = document.getElementById('pa11yIssues');
	  const pageErrors = document.getElementById('pageErrors');
	  const noIssues = document.getElementById('noIssues');

      pa11yIssues.addEventListener('click', () => {
		togglePages('pa11yIssues', '.page.hasErrors, .page.hasWarnings, .page.hasNotices');
		if(pa11yIssues.classList.contains('hidden'))
			pa11yIssues.setAttribute('title', "Select to turn the 'Lighthouse Issues' filter on");
		else
			pa11yIssues.setAttribute('title', "Select to turn the 'Lighthouse Issues' filter off");
	  });

      pageErrors.addEventListener('click', () => {
		togglePages('pageErrors', '.page.pageError');
		if(pageErrors.classList.contains('hidden'))
			pageErrors.setAttribute('title', "Select to turn the 'No Issues' filter on");
		else
			pageErrors.setAttribute('title', "Select to turn the 'No Issues' filter off");
	  });

      noIssues.addEventListener('click', () => {
		togglePages('noIssues', '.page:not(.hasErrors):not(.hasWarnings):not(.hasNotices):not(.pageError)');
		if(noIssues.classList.contains('hidden'))
			noIssues.setAttribute('title', "Select to turn the 'Page Errors' filter on");
		else
			noIssues.setAttribute('title', "Select to turn the 'Page Errors' filter off");
	  });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"
	    integrity="sha384-QzN1ywg2QLsf72ZkgRHgjkB/cfI4Dqjg6RJYQUqH6Wm8qp/MvmEYn+2NBsLnhLkr"
	    crossorigin="anonymous"></script>
    <script>
      var ctx = document.getElementById('accessibilityChart').getContext('2d');

      // following plugin courtesy of https://stackoverflow.com/questions/20966817/how-to-add-text-inside-the-doughnut-chart-using-chart-js
      Chart.pluginService.register({
	  beforeDraw: function (chart) {
	      if (chart.config.options.elements.center) {
		  //Get ctx from string
		  var ctx = chart.chart.ctx;

		  //Get options from the center object in options
		  var centerConfig = chart.config.options.elements.center;
		  var fontStyle = centerConfig.fontStyle || 'Arial';
		  var txt = centerConfig.text;
		  var color = centerConfig.color || '#000';
		  var sidePadding = centerConfig.sidePadding || 20;
		  var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
		  //Start with a base font of 30px
		  ctx.font = "30px " + fontStyle;

		  //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
		  var stringWidth = ctx.measureText(txt).width;
		  var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

		  // Find out how much the font can grow in width.
		  var widthRatio = elementWidth / stringWidth;
		  var newFontSize = Math.floor(30 * widthRatio);
		  var elementHeight = (chart.innerRadius * 2);

		  // Pick a new font size so it will not be larger than the height of label.
		  var fontSizeToUse = Math.min(newFontSize, elementHeight);

		  //Set font settings to draw it correctly.
		  ctx.textAlign = 'center';
		  ctx.textBaseline = 'middle';
		  var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
		  var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
		  ctx.font = fontSizeToUse+"px " + fontStyle;
		  ctx.fillStyle = color;

		  //Draw text in center
		  ctx.fillText(txt, centerX, centerY);
	      }
	  }
      });


      var chart = new Chart(ctx, {
	  // The type of chart we want to create
	  type: 'doughnut',

	  // The data for our dataset
	  data: {
	      labels: ['Passing URLs', 'URLs With Issues'],
	      datasets: [{
		  label: 'Accessibility Score',
		  backgroundColor: ['green', 'Grey'],
		  // borderColor: '',
		  // borderWidth: '5px',
		  data: [{{ summary.passes }}, {{ summary.failures }}]
	      }]
	  },

	  options: {
	      cutoutPercentage: 75,
	      elements: {
		  center: {
		      text: '{{ summary.score }}',
		      color: 'green', //Default black
		      fontStyle: 'Helvetica', //Default Arial
		      sidePadding: 15 //Default 20 (as a percentage)
		  }
	      }
	  }
      });
    </script>
  </body>

</html>
